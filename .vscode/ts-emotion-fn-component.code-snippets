{
	// Place your class-note workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Generate React-TS-Emotion default Format": {
		"prefix": "rted",
		"body": [
			"import * as React from 'react';",
			"",
			"import styled from '@emotion/styled';",
			"",
			"interface I${TM_FILENAME_BASE} {",
			"}",
			"",
			"export enum ${TM_FILENAME_BASE}Theme {",
			"  Default = 'DEFAULT',",
			"}",
			"",
			"const themeStyle: { [index: string]: any } = {",
			"  [${TM_FILENAME_BASE}Theme.Default]: css``,",
			"};",
			"",
			"const defaultTheme = css``;",
			"",
			"const style = (theme: ${TM_FILENAME_BASE}Theme) => css`",
			"  ${${defaultTheme}}",
			"  ${themeStyle[theme]}",
			"`;",
			"",
			"export function ${TM_FILENAME_BASE}(props: I${TM_FILENAME_BASE}) {",
			"  return (",
			"    <div>",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Generate React-TS-Emotion default Format"
	},
	"Generate React-TS-Emotion default Format without theme": {
		"prefix": "rtedwt",
		"body": [
			"import * as React from 'react';",
			"",
			"import styled from '@emotion/styled';",
			"",
			"interface I${TM_FILENAME_BASE} {",
			"}",
			"",
			"const style = () => css`",
			"",
			"`;",
			"",
			"export function ${TM_FILENAME_BASE}(props: I${TM_FILENAME_BASE}) {",
			"  return (",
			"    <div>",
			"    </div>",
			"  );",
			"}",
			""
		],
		"description": "Generate React-TS-Emotion default Format"
	},
	"Generate React-TS-Storybook default format": {
		"prefix": "rtsd",
		"body": [
			"import * as React from 'react';",
			"",
			"import { withKnobs, text, select, boolean, number } from '@storybook/addon-knobs';",
			"",
			"import {${1:componentName}, ${1:componentName}Theme } from './${1:componentName}';",
			"",
			"const defaultTitle = 'Components';",
			"",
			"export default {",
			"  title: `${${defaultTitle}}/${1:componentName}`,",
			"  components: ${1:componentName},",
			"  decorators: [withKnobs],",
			"};",
			"",
			"export const Default = () => {",
			"  const theme = select('Theme', ${1:componentName}Theme, ${1:componentName}Theme.Default);",
			"  return (",
			"    <${1:componentName} theme={theme}>",
			"    </${1:componentName}>",
			"  );",
			"};",
			"",
			""
		],
		"description": "Generate React-TS-Storybook default format"
	},
	"Generate React-TS-Redux-Slice default format": {
		"prefix": "rtrs",
		"body": [
			"import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"import { AppThunk, AppDispatch } from '@src/app/store';",
			"import { IRootState } from '@src/app/store';",
			"",
			"const sliceName = '';",
			"const initialState = {",
				"",
			"}",
			"",
			"const ${1:sliceName}Slice = createSlice({",
				"name: sliceName,",
				"initialState: ,",
				"reducers: {",
					"create(state, action: PayloadAction<>) {",
					"};",
				"},",
			"});",
			"",
			"export const ${1:sliceName}Action = ${1:sliceName}Slice.actions;",
			"export const ${1:sliceName}Reducer = ${1:sliceName}Slice.reducer;",
			"",
			"export const ${1:sliceName}Selector = {",
			"}",
			"",
		],
		"description": "Generate React-TS-Storybook default format"
	},
	"React Default TS Format": {
		"prefix": "rdtf",
		"body": [
			"import React from 'react';",
			"",
			"export function ${TM_FILENAME_BASE}(): React.ReactElement {",
			"  return (",
			"  )",
			"}",
		]
	},
	"Print to console.log": {
    "prefix": "cl",
    "body": ["console.log($0)"],
    "description": "Print to console.log"
  },
	"Generate useState": {
    "prefix": "rus",
    "body": ["const [${1:stateName},set${1:stateName}] = React.useState<string>()"],
    "description": "Print to console.log"
  },
	"Generate useEffect": {
    "prefix": "rue",
		"body": [
			"React.useEffect(() => {",
			"}, [])"
		],
    "description": "Print useeffect"
  },
}